<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jcjfgnl9205.github.io/</id><title>Blog</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-05-08T12:09:12+09:00</updated> <author> <name>Park Cheol Hwi</name> <uri>https://jcjfgnl9205.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://jcjfgnl9205.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://jcjfgnl9205.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 Park Cheol Hwi </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>requirements.txtとは</title><link href="https://jcjfgnl9205.github.io/posts/requirements.txt/" rel="alternate" type="text/html" title="requirements.txtとは" /><published>2022-05-08T00:00:00+09:00</published> <updated>2022-05-08T00:00:00+09:00</updated> <id>https://jcjfgnl9205.github.io/posts/requirements.txt/</id> <content src="https://jcjfgnl9205.github.io/posts/requirements.txt/" /> <author> <name>{"name"=>"Park Cheol Hwi", "link"=>"https://github.com/jcjfgnl9205"}</name> </author> <category term="python" /> <category term="pip" /> <category term="requirements.txt" /> <summary> requirements.txtとは 他の人とプロジェットを共有したり、本番環境に反映させるときに、プロジェクトに必要な外部パッケージを反映させる必要がある。 この外部パッケージの名前やバージョンがあるファイルが requirements.txt　です。 一言でいうと、対象のプロジェクトにpip installする必要があるパッケージリストを記載しているファイルです。 requirements.txtの使用方法 自分のプロジェクトにインストるされているパッケージリストを見る $ pip freeze requirements.txtを生成する方法 $ pip freeze &amp;gt; requirements.txt 下記のようにrequirements.txtファイルが生成され、パッケー... </summary> </entry> <entry><title>GithubのRepositoryを合体する</title><link href="https://jcjfgnl9205.github.io/posts/GIthub-Repository-Merge/" rel="alternate" type="text/html" title="GithubのRepositoryを合体する" /><published>2022-03-22T00:00:00+09:00</published> <updated>2022-03-22T00:00:00+09:00</updated> <id>https://jcjfgnl9205.github.io/posts/GIthub-Repository-Merge/</id> <content src="https://jcjfgnl9205.github.io/posts/GIthub-Repository-Merge/" /> <author> <name>{"name"=>"Park Cheol Hwi", "link"=>"https://github.com/jcjfgnl9205"}</name> </author> <category term="Gitshub" /> <category term="Git" /> <summary> GitHub repositoryを合体する 色んな小さなプロジェクトのRepositoryがどんどん増えていて、複数のRepositoryを一つにまとめたいと思いました。 新しいRepositoryを作成し、作成したファイルをCommitする方法でもできますが、 今まで作成したCommit履歴を残したかったので合体する方法を紹介します。 今回 project1-frontend Repository、project1-backend RepositoryのをNewProject Repositoryへ移動します。 新しい（移動したい）Repositoryを生成する（NewProject Repository） 生成したRepositoryをlocalにcloneする $ git clone [Repository] $ git clone... </summary> </entry> <entry><title>REST API</title><link href="https://jcjfgnl9205.github.io/posts/REST-API/" rel="alternate" type="text/html" title="REST API" /><published>2022-02-23T00:00:00+09:00</published> <updated>2022-02-23T00:00:00+09:00</updated> <id>https://jcjfgnl9205.github.io/posts/REST-API/</id> <content src="https://jcjfgnl9205.github.io/posts/REST-API/" /> <author> <name>{"name"=>"Park Cheol Hwi", "link"=>"https://github.com/jcjfgnl9205"}</name> </author> <category term="RESTAPI" /> <summary> API(application programming interface)とは コンピュータまたはアプリケーションが相互に通信する方法を説明する一連の定義済みルール APIの仕組み クライアントアプリケーションは、要求とも呼ばれる情報を取得するためにAPIコールを開始する 有効な要求を受信すると、APIは外部プログラムまたはWebサーバにコールを発信する サーバは、要求された情報を含む応答をAPIに送信する APIはデータを最初の要求アプリケーションに転送する REST(Representational State Transfer)とは Web上のコンピュータシステム間で標準を提供し、システム間の通信を容易にするアーキテクチャスタイル RESTの設計原則 統一されたインターフェース 同じリソースに対する... </summary> </entry> <entry><title>Web Storageとは？</title><link href="https://jcjfgnl9205.github.io/posts/Web-Storage/" rel="alternate" type="text/html" title="Web Storageとは？" /><published>2022-02-20T00:00:00+09:00</published> <updated>2022-02-20T00:00:00+09:00</updated> <id>https://jcjfgnl9205.github.io/posts/Web-Storage/</id> <content src="https://jcjfgnl9205.github.io/posts/Web-Storage/" /> <author> <name>{"name"=>"Park Cheol Hwi", "link"=>"https://github.com/jcjfgnl9205"}</name> </author> <category term="WebStorage" /> <category term="Cookie" /> <summary> Web Storage Web Storageとは、HTML5より使える機能として、データをサーバーではなくクライアントウェブブラウザに保存できる機能として、Cookieと似ている？ Web Storageは key, valueでデータを保存して、key値でデータが取得できる。 Local Strogae(永久的に保存する)とSession Storage(一時的に保存する)がそれぞれあるので環境によって使用する。 Web Storageは、Cookieと同様でサイトのドメインの中でしか使用できない。 Web Storage VS Cookie CookieとWeb Storageは全てブラウザにデータを保存しますが、Cookieのディメリットの部分を保安できる Cookieはいつもサーバーにデータを送信する ウェブサイトでCookieを設定すると、全... </summary> </entry> </feed>
